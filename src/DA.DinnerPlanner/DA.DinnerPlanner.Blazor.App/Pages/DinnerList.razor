@page "/DinnerList"
@using DA.DinnerPlanner.Model;
@using System.Text
@using DA.DinnerPlanner.Model.Contracts
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid

@implements IDisposable		// see: https://learn.microsoft.com/de-de/aspnet/core/blazor/blazor-ef-core?view=aspnetcore-9.0#scope-a-database-context-to-the-lifetime-of-the-component

@inject IConfiguration cfg
@inject IGeoCoder geo
@inject IDbContextFactory<DinnerPlannerContext> contextFactory
@inject NavigationManager navMgr
<style>
	/* Magnifying glass */
	.grid ::deep .col-options-button {
		background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"> <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /> </svg>');
	}
</style>
<h1>Dinners</h1>
@{
	if (!Loading)
	{
		<QuickGrid @ref="DinnerGrid" Items="Dinners" TGridItem="Dinner">
			<PropertyColumn Title="Name" Property="@(d=>d.Dinnerdescription)" Sortable="true">
				<ColumnOptions>
					<input type="search" value="@DinnerSearch" placeholder="Filter by name" @onchange="(args)=>OnSearchByNameChangeAsync(args)"
						@bind:after="@(()=>AfterSearchAsync())"/>
					<input type="button" value="clear" @onclick="OnSearchClear" @bind:after="@(()=>AfterSearchAsync())" />
				</ColumnOptions>
			</PropertyColumn>
			<PropertyColumn Title="Date and Time" Property="@(d=>d.DinnerDate)" Sortable="true" />
			<PropertyColumn Title="No of persons allowed" Property="@(d=>d.NumberPersonsAllowed)" Sortable="true" />
			<PropertyColumn Title="No of guests invited (including cooks)" Property="@(d=>(d.Guests.Count + d.Cooks.Count).ToString())" Sortable="true" />
			<PropertyColumn Title="Host" Property="@(d=>d.Host!.GetDefaultDisplayName())" Sortable="true" />
			<TemplateColumn Title="Actions" Context="dinner">
				@{
					@if (dinner.DinnerDate > DateTime.UtcNow)   // liegt das Dinner in der Zukunft, darf es gelöscht werden
					{
						<input type="image" src="img/delete.png" width="15" height="15"
								@onclick="(a)=>DelDinner(dinner)" />
						<input type="button" value="Invite guests"
								@onclick="(a)=>InviteGuestsAsync(dinner)" />
					}
					@if (dinner.DinnerDate < DateTime.UtcNow || dinner.HasTakenDone) // liegt es in der Vergangenheit oder fand es bereits statt, kann es bewertet werden
					{
						<a href="EditDinnerReview/@dinner.Id">rate</a>
					}
				}
			</TemplateColumn>
			<TemplateColumn Title="Ratings" Context="dinner">
				<ShowRatingsStars Dinner="@dinner"></ShowRatingsStars>
			</TemplateColumn>
		</QuickGrid>
	}
}
<div>
	<h2>create new dinner</h2>
	<EditForm Model="@NewDinner" OnSubmit="NewDinnerSubmittedAsync">
		<div class="form-group">
			<label>Name/Description:</label>
			<InputText @bind-Value="@NewDinner.Dinnerdescription" />
			<label>Date:</label>
			<InputDate @bind-Value="@NewDinner.DinnerDate" />
			<label>No. of Persons allowed:</label>
			<InputNumber @bind-Value="@NewDinner.NumberPersonsAllowed"/>
			<label>Host:</label>
			<InputSelect TValue="int" @bind-Value="@NewDinnerHostId">
				@foreach(var u in Users)
				{
					<option value="@u.Id">@u.GetDefaultDisplayName()</option>
				}
			</InputSelect>
 		</div>
		<button type="submit" class="btn btn-primary">create</button>
	</EditForm>
</div>
